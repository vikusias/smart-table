/**
 * Функция сортировки по возрастанию для указанного поля объекта
 *
 * @param {string} field - Имя поля, по которому производится сортировка
 * @returns {Function} - Функция сравнения для метода sort
 *
 * Подробнее: Эта функция высшего порядка создает компаратор для сортировки
 * массива объектов по возрастанию. Функция возвращает другую функцию,
 * что позволяет переиспользовать логику сортировки с разными полями.
 */
const sortUp = (field) => (a, b) => {
  if (a[field] > b[field]) return 1;
  if (a[field] < b[field]) return -1;
  return 0;
};

/**
 * Функция сортировки по убыванию для указанного поля объекта
 *
 * @param {string} field - Имя поля, по которому производится сортировка
 * @returns {Function} - Функция сравнения для метода sort
 *
 * Подробнее: Работает аналогично sortUp, но возвращает противоположные
 * значения, чтобы сортировать элементы в обратном порядке (по убыванию).
 * Логика инвертирована по сравнению с сортировкой по возрастанию.
 */
const sortDown = (field) => (a, b) => {
  if (a[field] < b[field]) return 1;
  if (a[field] > b[field]) return -1;
  return 0;
};

/**
 * Объект, хранящий функции сортировки для удобного доступа по имени
 *
 * Подробнее: Этот объект позволяет выбрать нужную функцию сортировки
 * по строковому ключу ('up' или 'down'), что упрощает работу с направлением
 * сортировки в пользовательском интерфейсе.
 */
const sortFn = {
  up: sortUp,
  down: sortDown,
};

/**
 * Карта переключения состояний сортировки
 *
 * Подробнее: Этот объект определяет циклическую последовательность
 * состояний сортировки. При последовательных нажатиях на заголовок таблицы
 * сортировка будет циклически меняться: отсутствие сортировки -> по возрастанию ->
 * по убыванию -> отсутствие сортировки и т.д.
 */
export const sortMap = {
  none: "up",
  up: "down",
  down: "none",
};

/**
 * Функция для сортировки массива объектов по указанному полю и направлению
 *
 * @param {Array} arr - Исходный массив объектов для сортировки
 * @param {string | null} field - Поле объекта, по которому производится сортировка
 * @param {string | null} order - Направление сортировки: 'none', 'up' или 'down'
 * @returns {Array} - Отсортированный массив или исходный массив, если сортировка не требуется
 *
 * Подробнее: Эта функция использует метод toSorted(), который создает новый массив
 * вместо изменения исходного (в отличие от sort()). Это соответствует принципам
 * иммутабельности и функционального программирования, что важно для работы
 * с современными фреймворками и библиотеками, такими как React.
 *
 * Функция проверяет наличие поля для сортировки, валидность направления
 * и применяет соответствующую функцию сортировки только при необходимости.
 * Это оптимизирует работу, предотвращая ненужные операции.
 */
export function sortCollection(arr, field, order) {
  if (field && order !== "none" && sortFn[order]) {
    return arr.toSorted(sortFn[order](field));
  }
  return arr;
}
